import pandas as pd

def descriptive_stats_per_ticket(df):
    # Filter reopenings
    reopenings = df[df['Event_Type'] == 'IP-Level Ticket Reopened']
    
    # Group by ticket ID
    grouped = reopenings.groupby('unique_ip_ticket_id')['Reopen_Deltas_int']
    
    # Calculate statistics
    stats_df = grouped.agg([
        'count',                      # Number of reopenings
        'mean',                       # Mean
        'std',                        # Standard Deviation
        'median',                     # Median
        'min',                        # Minimum
        'max',                        # Maximum
        lambda x: x.quantile(0.25),   # 25th Percentile
        lambda x: x.quantile(0.75),   # 75th Percentile
        lambda x: x.quantile(0.05),   # 5th Percentile
        lambda x: x.quantile(0.95)    # 95th Percentile
    ]).reset_index()
    
    # Rename columns
    stats_df.columns = [
        'unique_ip_ticket_id',
        'Total Number of Reopenings',
        'Mean',
        'Standard Deviation',
        'Median',
        'Minimum',
        'Maximum',
        '25th Percentile',
        '75th Percentile',
        '5th Percentile',
        '95th Percentile'
    ]
    
    return stats_df

# Usage
stats_per_ticket = descriptive_stats_per_ticket(deltas_explode)
print(stats_per_ticket)




import pandas as pd

def descriptive_stats_table(df):
    # Filter reopenings
    reopenings = df[df['Event_Type'] == 'IP-Level Ticket Reopened']
    
    # Calculate statistics
    count_reopen = reopenings['Event_Type'].count()
    reopening_pct = reopenings['unique_ip_ticket_id'].nunique() / df['unique_ip_ticket_id'].nunique() * 100
    days_mean = reopenings['Reopen_Deltas_int'].mean()
    days_sd = reopenings['Reopen_Deltas_int'].std()
    days_median = reopenings['Reopen_Deltas_int'].median()
    reopen_min = reopenings['Reopen_Deltas_int'].min()
    reopen_max = reopenings['Reopen_Deltas_int'].max()
    lower_bound_pct = reopenings['Reopen_Deltas_int'].quantile(0.25)
    upper_bound_pct = reopenings['Reopen_Deltas_int'].quantile(0.75)
    five_lower_bound_pct = reopenings['Reopen_Deltas_int'].quantile(0.05)
    five_upper_bound_pct = reopenings['Reopen_Deltas_int'].quantile(0.95)
    
    # Create a dictionary with the statistics
    stats_dict = {
        'Metric': [
            'Total Number of Reopenings',
            'Percentage of Reopenings',
            'Mean',
            'Standard Deviation',
            'Median',
            'Minimum',
            'Maximum',
            '25th Percentile',
            '75th Percentile',
            '5th Percentile',
            '95th Percentile'
        ],
        'Value': [
            count_reopen,
            round(reopening_pct, 2),
            round(days_mean, 2),
            round(days_sd, 2),
            round(days_median, 2),
            round(reopen_min, 2),
            round(reopen_max, 2),
            round(lower_bound_pct, 2),
            round(upper_bound_pct, 2),
            round(five_lower_bound_pct, 2),
            round(five_upper_bound_pct, 2)
        ]
    }
    
    # Convert dictionary to DataFrame
    stats_df = pd.DataFrame(stats_dict)
    
    return stats_df

# Usage
stats_table = descriptive_stats_table(deltas_explode)
print(stats_table)




import pandas as pd

def descriptive_stats_per_ticket(df):
    # Reset index if 'unique_ip_ticket_id' is an index
    if 'unique_ip_ticket_id' in df.index.names:
        df = df.reset_index()
    
    # Ensure correct column names
    if 'Event_Type' not in df.columns or 'unique_ip_ticket_id' not in df.columns or 'Reopen_Deltas_int' not in df.columns:
        raise ValueError("One or more required columns are missing in the dataframe.")
    
    # Filter reopenings
    reopenings = df[df['Event_Type'] == 'IP-Level Ticket Reopened']
    
    # Check if filtered DataFrame is empty
    if reopenings.empty:
        print("No rows with 'IP-Level Ticket Reopened' found.")
        return pd.DataFrame()  # Return an empty DataFrame
    
    # Group by ticket ID
    grouped = reopenings.groupby('unique_ip_ticket_id')['Reopen_Deltas_int']
    
    # Calculate statistics
    stats_df = grouped.agg([
        'count',                      # Number of reopenings
        'mean',                       # Mean
        'std',                        # Standard Deviation
        'median',                     # Median
        'min',                        # Minimum
        'max',                        # Maximum
        lambda x: x.quantile(0.25),   # 25th Percentile
        lambda x: x.quantile(0.75),   # 75th Percentile
        lambda x: x.quantile(0.05),   # 5th Percentile
        lambda x: x.quantile(0.95)    # 95th Percentile
    ]).reset_index()
    
    # Rename columns
    stats_df.columns = [
        'unique_ip_ticket_id',
        'Total Number of Reopenings',
        'Mean',
        'Standard Deviation',
        'Median',
        'Minimum',
        'Maximum',
        '25th Percentile',
        '75th Percentile',
        '5th Percentile',
        '95th Percentile'
    ]
    
    return stats_df

# Usage
stats_per_ticket = descriptive_stats_per_ticket(deltas_explode)
print(stats_per_ticket)


