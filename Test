An A-B check for data quality is a comparison between two datasets to verify their consistency, accuracy, or to identify discrepancies. This is commonly used to validate data synchronization between two systems, data migrations, or to compare different stages in a data pipeline.

Let's consider two tables, `TableA` and `TableB`, where you want to ensure that:

1. Both tables have the same set of records (row-level consistency).
2. Specific columns in both tables contain matching values (column-level consistency).

Here are examples of SQL queries for performing A-B checks:

### 1. Row Count Check

Ensure both tables have the same number of rows.

```sql
-- Row count comparison
SELECT 
    (SELECT COUNT(*) FROM TableA) AS TableA_RowCount,
    (SELECT COUNT(*) FROM TableB) AS TableB_RowCount;
```

### 2. Primary Key Check

Ensure both tables have the same set of primary key values.

```sql
-- Assuming 'PrimaryKey' is the primary key column in both tables
-- Find keys in TableA but not in TableB
SELECT PrimaryKey
FROM TableA
WHERE PrimaryKey NOT IN (SELECT PrimaryKey FROM TableB);

-- Find keys in TableB but not in TableA
SELECT PrimaryKey
FROM TableB
WHERE PrimaryKey NOT IN (SELECT PrimaryKey FROM TableA);
```

### 3. Column Value Check

Compare the values of specific columns in both tables for matching primary keys.

```sql
-- Assuming columns 'Column1', 'Column2' need to be compared
-- Differences in 'Column1' for matching keys
SELECT a.PrimaryKey, a.Column1 AS TableA_Column1, b.Column1 AS TableB_Column1
FROM TableA a
JOIN TableB b ON a.PrimaryKey = b.PrimaryKey
WHERE a.Column1 <> b.Column1 OR a.Column1 IS NULL OR b.Column1 IS NULL;

-- Differences in 'Column2' for matching keys
SELECT a.PrimaryKey, a.Column2 AS TableA_Column2, b.Column2 AS TableB_Column2
FROM TableA a
JOIN TableB b ON a.PrimaryKey = b.PrimaryKey
WHERE a.Column2 <> b.Column2 OR a.Column2 IS NULL OR b.Column2 IS NULL;
```

### 4. Full Row Comparison

Ensure all columns match between the two tables for each primary key. This can be more complex depending on the number of columns but is essential for complete data validation.

```sql
-- Assuming the tables have columns Column1, Column2, Column3, etc.
-- Identify rows with any column mismatch
SELECT a.*
FROM TableA a
JOIN TableB b ON a.PrimaryKey = b.PrimaryKey
WHERE 
    (a.Column1 <> b.Column1 OR (a.Column1 IS NULL AND b.Column1 IS NOT NULL) OR (a.Column1 IS NOT NULL AND b.Column1 IS NULL))
    OR (a.Column2 <> b.Column2 OR (a.Column2 IS NULL AND b.Column2 IS NOT NULL) OR (a.Column2 IS NOT NULL AND b.Column2 IS NULL))
    OR (a.Column3 <> b.Column3 OR (a.Column3 IS NULL AND b.Column3 IS NOT NULL) OR (a.Column3 IS NOT NULL AND b.Column3 IS NULL));
```

### 5. Aggregate Value Check

Ensure that aggregate values (e.g., sums, averages) for specific columns match between the two tables.

```sql
-- Sum of 'Amount' column comparison
SELECT 
    (SELECT SUM(Amount) FROM TableA) AS TableA_AmountSum,
    (SELECT SUM(Amount) FROM TableB) AS TableB_AmountSum;

-- Average of 'Amount' column comparison
SELECT 
    (SELECT AVG(Amount) FROM TableA) AS TableA_AmountAvg,
    (SELECT AVG(Amount) FROM TableB) AS TableB_AmountAvg;
```

### 6. Date Range Check

Ensure both tables have records within the same date range.

```sql
-- Min and Max 'InsertTime' comparison
SELECT 
    (SELECT MIN(InsertTime) FROM TableA) AS TableA_MinDate,
    (SELECT MAX(InsertTime) FROM TableA) AS TableA_MaxDate,
    (SELECT MIN(InsertTime) FROM TableB) AS TableB_MinDate,
    (SELECT MAX(InsertTime) FROM TableB) AS TableB_MaxDate;
```

### 7. Missing Records Check

Identify records present in one table but missing in another based on primary key.

```sql
-- Records in TableA but not in TableB
SELECT a.*
FROM TableA a
LEFT JOIN TableB b ON a.PrimaryKey = b.PrimaryKey
WHERE b.PrimaryKey IS NULL;

-- Records in TableB but not in TableA
SELECT b.*
FROM TableB b
LEFT JOIN TableA a ON b.PrimaryKey = a.PrimaryKey
WHERE a.PrimaryKey IS NULL;
```

### 8. Count of Distinct Values

Compare the count of distinct values in specific columns between the two tables.

```sql
-- Count of distinct values in 'Category' column
SELECT 
    (SELECT COUNT(DISTINCT Category) FROM TableA) AS TableA_DistinctCategoryCount,
    (SELECT COUNT(DISTINCT Category) FROM TableB) AS TableB_DistinctCategoryCount;
```

### Example Scenario

Assume `TableA` is the source table and `TableB` is the destination table after a data migration. You want to ensure the data in `TableB` matches the original data in `TableA`. 

By running these SQL queries, you can systematically verify that:

- Both tables have the same number of records.
- All primary keys in `TableA` are present in `TableB`.
- Values in key columns are consistent between the two tables.
- There are no unexpected records missing from either table.

These checks help ensure data quality and integrity across different datasets.



SELECT 
    COLUMN_NAME, 
    DATA_TYPE, 
    CHARACTER_MAXIMUM_LENGTH, 
    IS_NULLABLE, 
    COLUMN_DEFAULT
FROM 
    INFORMATION_SCHEMA.COLUMNS
WHERE 
    TABLE_NAME = 'Orders' AND TABLE_SCHEMA = 'dbo';



SELECT 
    kc.column_name
FROM 
    information_schema.table_constraints AS tc
JOIN 
    information_schema.key_column_usage AS kc 
    ON tc.constraint_name = kc.constraint_name
    AND tc.table_schema = kc.table_schema
WHERE 
    tc.constraint_type = 'PRIMARY KEY'
    AND tc.table_name = 'your_table_name'
    AND tc.table_schema = 'your_schema_name';



import boto3
import json

# Initialize the S3 client
s3_client = boto3.client('s3')

# Replace with your bucket name
bucket_name = 'your-bucket-name'

# Replace with the prefix of your folders (if any)
prefix = 'your-prefix/'

# Get a list of all JSON files in the bucket
response = s3_client.list_objects_v2(Bucket=bucket_name, Prefix=prefix)

# Initialize an empty list to hold all data
all_data = []

# Iterate over the files
for obj in response.get('Contents', []):
    key = obj['Key']
    if key.endswith('.json'):
        # Download the JSON file
        file_content = s3_client.get_object(Bucket=bucket_name, Key=key)['Body'].read().decode('utf-8')
        
        # Load the JSON content
        json_data = json.loads(file_content)
        
        # Append the data to all_data list
        all_data.append(json_data)

# Write the combined data to a single file
with open('combined_data.json', 'w') as outfile:
    json.dump(all_data, outfile)

# Optionally, upload the combined file back to S3
s3_client.upload_file('combined_data.json', bucket_name, 'combined_data.json')

print("Combined JSON file created and uploaded successfully.")


# Upload the JSON file to S3
import boto3

s3_client = boto3.client('s3')
bucket_name = 'your-bucket-name'
json_file_path = 'path/to/your/large_json_file.json'
s3_key = 'your-folder/large_json_file.json'

s3_client.upload_file(json_file_path, bucket_name, s3_key)

# Load data into Redshift using the COPY command
conn = psycopg2.connect(
    dbname=redshift_db,
    user=redshift_user,
    password=redshift_password,
    host=redshift_endpoint,
    port=redshift_port
)
cur = conn.cursor()

copy_sql = """
COPY your_table_name (column1, column2, column3)
FROM 's3://your-bucket-name/your-folder/large_json_file.json'
IAM_ROLE 'arn:aws:iam::your-account-id:role/your-redshift-role'
FORMAT AS JSON 'auto';
"""

# Execute the COPY command
cur.execute(copy_sql)
conn.commit()

# Close the connection
cur.close()
conn.close()



import json

# JSON schema definition
schema_json = '''
{
  "schema": "my_new_schema",
  "tables": [
    {
      "table_name": "my_new_table",
      "columns": [
        {"name": "column1", "type": "VARCHAR(255)"},
        {"name": "column2", "type": "INTEGER"},
        {"name": "column3", "type": "BOOLEAN"}
      ]
    }
  ]
}
'''

# Parse the JSON
schema = json.loads(schema_json)

# Generate SQL for creating schema
create_schema_sql = f"CREATE SCHEMA {schema['schema']};\n"

# Generate SQL for creating tables
create_table_sql = ""
for table in schema['tables']:
    table_name = table['table_name']
    columns = table['columns']
    columns_sql = ", ".join([f"{col['name']} {col['type']}" for col in columns])
    create_table_sql += f"CREATE TABLE {schema['schema']}.{table_name} ({columns_sql});\n"

# Combine the SQL statements
full_sql = create_schema_sql + create_table_sql
print(full_sql)


import boto3
import pandas as pd
import psycopg2
from io import StringIO

# Assuming df is your DataFrame
df = pd.json_normalize(data_list)

# Save DataFrame to CSV
csv_buffer = StringIO()
df.to_csv(csv_buffer, index=False)

# Upload CSV to S3
s3 = boto3.client('s3')
bucket_name = 'your-s3-bucket'
s3_key = 'your-s3-key/data.csv'
s3.put_object(Bucket=bucket_name, Key=s3_key, Body=csv_buffer.getvalue())

# Connect to Redshift
conn = psycopg2.connect(
    dbname='your_dbname',
    user='your_user',
    password='your_password',
    host='your_redshift_cluster_endpoint',
    port='5439'
)
cur = conn.cursor()

# Create table if it doesn't exist
create_table_query = """
CREATE TABLE IF NOT EXISTS your_table_name (
    column1 VARCHAR(255),
    column2 INTEGER,
    column3 BOOLEAN
    -- Add other columns as needed
);
"""
cur.execute(create_table_query)
conn.commit()

# Copy data from S3 to Redshift
copy_query = f"""
COPY your_table_name
FROM 's3://{bucket_name}/{s3_key}'
IAM_ROLE 'your_iam_role_arn'
CSV
IGNOREHEADER 1;
"""
cur.execute(copy_query)
conn.commit()

# Close the connection
cur.close()
conn.close()






import boto3
import pandas as pd
import psycopg2
import json

# AWS S3 Configuration
s3_bucket = 'your-s3-bucket-name'
s3_key = 'path/to/your/csvfile.csv'

# Redshift Configuration
redshift_endpoint = 'your-redshift-endpoint'
redshift_user = 'your-username'
redshift_password = 'your-password'
redshift_database = 'your-database'
redshift_port = 5439

# Download CSV from S3
s3_client = boto3.client('s3')
s3_client.download_file(s3_bucket, s3_key, 'localfile.csv')

# Read CSV into DataFrame
df = pd.read_csv('localfile.csv')

# Process DataFrame to ensure semi-structured columns are JSON strings
def convert_to_json_string(column):
    return column.apply(lambda x: json.dumps(x) if isinstance(x, (dict, list)) else x)

df['semi_structured_col1'] = convert_to_json_string(df['semi_structured_col1'])
df['semi_structured_col2'] = convert_to_json_string(df['semi_structured_col2'])
df['semi_structured_col3'] = convert_to_json_string(df['semi_structured_col3'])

# Connect to Redshift
conn = psycopg2.connect(
    dbname=redshift_database,
    user=redshift_user,
    password=redshift_password,
    host=redshift_endpoint,
    port=redshift_port
)
cur = conn.cursor()

# Create table if not exists
create_table_query = """
CREATE TABLE IF NOT EXISTS my_table (
    id INT,
    name VARCHAR(255),
    age INT,
    semi_structured_col1 SUPER,
    semi_structured_col2 SUPER,
    semi_structured_col3 SUPER
);
"""
cur.execute(create_table_query)
conn.commit()

# Insert data into Redshift
insert_query = """
INSERT INTO my_table (id, name, age, semi_structured_col1, semi_structured_col2, semi_structured_col3)
VALUES (%s, %s, %s, %s, %s, %s);
"""

for index, row in df.iterrows():
    cur.execute(insert_query, (
        row['id'],
        row['name'],
        row['age'],
        row['semi_structured_col1'],
        row['semi_structured_col2'],
        row['semi_structured_col3']
    ))

conn.commit()

# Close connection
cur.close()
conn.close()

print("Data loaded successfully into Redshift")





import pandas as pd
import psycopg2

# Load the CSV file into a DataFrame
file_path = '/mnt/data/your_sample_data.csv'  # Replace with your actual file path
df = pd.read_csv(file_path)

# Define the list of required columns and their default values
required_columns = {
    'data_type': None,
    'data_version': None,
    'cve_id': None,
    'assigner_org_id': None,
    'state': None,
    'assigner_short_name': None,
    'date_reserved': None,
    'date_published': None,
    'date_updated': None,
    'provider_org_id': None,
    'provider_short_name': None,
    'provider_date_updated': None,
    'affected': None,
    'metrics': None,
    'descriptions': None,
    'problem_types': None,
    'title': None
}

# Helper function to get value with a default for missing keys
def get_value(row, key, default=None):
    return row[key] if key in row else default

# Establish a connection to Redshift
redshift_conn = psycopg2.connect(
    dbname='your_db_name',
    user='your_username',
    password='your_password',
    host='your_redshift_cluster',
    port='your_port'
)
redshift_cursor = redshift_conn.cursor()

# Define the insert query
insert_query = """
INSERT INTO cve_data (data_type, data_version, cve_id, assigner_org_id, state, assigner_short_name, date_reserved, date_published, date_updated, provider_org_id, provider_short_name, provider_date_updated, affected, metrics, descriptions, problem_types, title)
VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);
"""

# Execute the insert query for each row
for index, row in df.iterrows():
    redshift_cursor.execute(insert_query, [
        get_value(row, 'data_type', required_columns['data_type']),
        get_value(row, 'data_version', required_columns['data_version']),
        get_value(row, 'cve_id', required_columns['cve_id']),
        get_value(row, 'assigner_org_id', required_columns['assigner_org_id']),
        get_value(row, 'state', required_columns['state']),
        get_value(row, 'assigner_short_name', required_columns['assigner_short_name']),
        get_value(row, 'date_reserved', required_columns['date_reserved']),
        get_value(row, 'date_published', required_columns['date_published']),
        get_value(row, 'date_updated', required_columns['date_updated']),
        get_value(row, 'provider_org_id', required_columns['provider_org_id']),
        get_value(row, 'provider_short_name', required_columns['provider_short_name']),
        get_value(row, 'provider_date_updated', required_columns['provider_date_updated']),
        get_value(row, 'affected', required_columns['affected']),
        get_value(row, 'metrics', required_columns['metrics']),
        get_value(row, 'descriptions', required_columns['descriptions']),
        get_value(row, 'problem_types', required_columns['problem_types']),
        get_value(row, 'title', required_columns['title'])
    ])

# Commit the transaction and close the connection
redshift_conn.commit()
redshift_cursor.close()
redshift_conn.close()






import pandas as pd
import psycopg2

# Load the CSV file into a DataFrame
file_path = '/mnt/data/your_sample_data.csv'  # Replace with your actual file path
df = pd.read_csv(file_path)

# Define the list of required columns and their default values
required_columns = {
    'data_type': None,
    'data_version': None,
    'cve_id': None,
    'assigner_org_id': None,
    'state': None,
    'assigner_short_name': None,
    'date_reserved': None,
    'date_published': None,
    'date_updated': None,
    'provider_org_id': None,
    'provider_short_name': None,
    'provider_date_updated': None,
    'affected': None,
    'metrics': None,
    'descriptions': None,
    'problem_types': None,
    'title': None
}

# Define maximum lengths for columns
max_lengths = {
    'data_type': 100,
    'data_version': 100,
    'cve_id': 100,
    'assigner_org_id': 100,
    'state': 100,
    'assigner_short_name': 100,
    'date_reserved': 100,
    'date_published': 100,
    'date_updated': 100,
    'provider_org_id': 100,
    'provider_short_name': 100,
    'provider_date_updated': 100,
    'affected': 100,
    'metrics': 100,
    'descriptions': 100,
    'problem_types': 100,
    'title': 100
}

# Helper function to get value with a default for missing keys and truncate if necessary
def get_value(row, key, default=None, max_length=None):
    value = row.get(key, default)
    if max_length and isinstance(value, str) and len(value) > max_length:
        value = value[:max_length]  # Truncate value to the maximum length
    return value

# Establish a connection to Redshift
redshift_conn = psycopg2.connect(
    dbname='your_db_name',
    user='your_username',
    password='your_password',
    host='your_redshift_cluster',
    port='your_port'
)
redshift_cursor = redshift_conn.cursor()

# Define the insert query
insert_query = """
INSERT INTO cve_data (data_type, data_version, cve_id, assigner_org_id, state, assigner_short_name, date_reserved, date_published, date_updated, provider_org_id, provider_short_name, provider_date_updated, affected, metrics, descriptions, problem_types, title)
VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);
"""

# Execute the insert query for each row
for index, row in df.iterrows():
    # Convert the row to a dictionary
    row_dict = row.to_dict()

    # Execute the query with truncated values
    redshift_cursor.execute(insert_query, [
        get_value(row_dict, 'data_type', required_columns['data_type'], max_lengths['data_type']),
        get_value(row_dict, 'data_version', required_columns['data_version'], max_lengths['data_version']),
        get_value(row_dict, 'cve_id', required_columns['cve_id'], max_lengths['cve_id']),
        get_value(row_dict, 'assigner_org_id', required_columns['assigner_org_id'], max_lengths['assigner_org_id']),
        get_value(row_dict, 'state', required_columns['state'], max_lengths['state']),
        get_value(row_dict, 'assigner_short_name', required_columns['assigner_short_name'], max_lengths['assigner_short_name']),
        get_value(row_dict, 'date_reserved', required_columns['date_reserved'], max_lengths['date_reserved']),
        get_value(row_dict, 'date_published', required_columns['date_published'], max_lengths['date_published']),
        get_value(row_dict, 'date_updated', required_columns['date_updated'], max_lengths['date_updated']),
        get_value(row_dict, 'provider_org_id', required_columns['provider_org_id'], max_lengths['provider_org_id']),
        get_value(row_dict, 'provider_short_name', required_columns['provider_short_name'], max_lengths['provider_short_name']),
        get_value(row_dict, 'provider_date_updated', required_columns['provider_date_updated'], max_lengths['provider_date_updated']),
        get_value(row_dict, 'affected', required_columns['affected'], max_lengths['affected']),
        get_value(row_dict, 'metrics', required_columns['metrics'], max_lengths['metrics']),
        get_value(row_dict, 'descriptions', required_columns['descriptions'], max_lengths['descriptions']),
        get_value(row_dict, 'problem_types', required_columns['problem_types'], max_lengths['problem_types']),
        get_value(row_dict, 'title', required_columns['title'], max_lengths['title'])
    ])

# Commit the transaction and close the connection
redshift_conn.commit()
redshift_cursor.close()
redshift_conn.close()



WITH current_load AS (
    SELECT *
    FROM vmtableau.cve_data
    WHERE last_load_timestamp = (SELECT MAX(last_load_timestamp) FROM vmtableau.cve_data)
),
previous_loads AS (
    SELECT
        cve_id,
        MAX(CASE WHEN CVSS IS NOT NULL THEN last_load_timestamp END) AS last_cvss_date,
        MAX(CASE WHEN cpe IS NOT NULL THEN last_load_timestamp END) AS last_cpe_date,
        MAX(CASE WHEN we_id IS NOT NULL THEN last_load_timestamp END) AS last_we_date
    FROM vmtableau.cve_data
    WHERE last_load_timestamp < (SELECT MAX(last_load_timestamp) FROM vmtableau.cve_data)
    GROUP BY cve_id
)
SELECT
    c.cve_id,
    c.CVSS,
    c.cpe,
    c.cwe_id,
    c.last_load_timestamp,
    c.date_cvss_added,
    c.date_cpe_added,
    c.date_cwe_added,
    CASE
        WHEN c.CVSS IS NOT NULL AND
             (p.last_cvss_date IS NULL OR c.last_load_timestamp > p.last_cvss_date) AND
             c.date_cvss_added IS NULL
        THEN c.last_load_timestamp
        ELSE c.date_cvss_added
    END AS new_date_cvss_added,
    CASE
        WHEN c.cpe IS NOT NULL AND
             (p.last_cpe_date IS NULL OR c.last_load_timestamp > p.last_cpe_date) AND
             c.date_cpe_added IS NULL
        THEN c.last_load_timestamp
        ELSE c.date_cpe_added
    END AS new_date_cpe_added,
    CASE
        WHEN c.cwe_id IS NOT NULL AND
             (p.last_we_date IS NULL OR c.last_load_timestamp > p.last_we_date) AND
             c.date_cwe_added IS NULL
        THEN c.last_load_timestamp
        ELSE c.date_cwe_added
    END AS new_date_cwe_added
FROM current_load c
LEFT JOIN previous_loads p ON c.cve_id = p.cve_id;





    SELECT *
    FROM vmtableau.cve_data
    WHERE last_load_timestamp = (SELECT MAX(last_load_timestamp) FROM vmtableau.cve_data)
),
previous_loads AS (
    SELECT
        cve_id,
        MAX(CASE WHEN CVSS IS NOT NULL THEN last_load_timestamp END) AS last_cvss_date,
        MAX(CASE WHEN cpe IS NOT NULL THEN last_load_timestamp END) AS last_cpe_date,
        MAX(CASE WHEN we_id IS NOT NULL THEN last_load_timestamp END) AS last_we_date
    FROM vmtableau.cve_data
    WHERE last_load_timestamp < (SELECT MAX(last_load_timestamp) FROM vmtableau.cve_data)
    GROUP BY cve_id
)
UPDATE vmtableau.cve_data
SET 
    date_cvss_added = CASE
        WHEN current_load.CVSS IS NOT NULL AND
             (previous_loads.last_cvss_date IS NULL OR current_load.last_load_timestamp > previous_loads.last_cvss_date) AND
             vmtableau.cve_data.date_cvss_added IS NULL
        THEN current_load.last_load_timestamp
        ELSE vmtableau.cve_data.date_cvss_added
    END,
    date_cpe_added = CASE
        WHEN current_load.cpe IS NOT NULL AND
             (previous_loads.last_cpe_date IS NULL OR current_load.last_load_timestamp > previous_loads.last_cpe_date) AND
             vmtableau.cve_data.date_cpe_added IS NULL
        THEN current_load.last_load_timestamp
        ELSE vmtableau.cve_data.date_cpe_added
    END,
    date_cwe_added = CASE
        WHEN current_load.cwe_id IS NOT NULL AND
             (previous_loads.last_we_date IS NULL OR current_load.last_load_timestamp > previous_loads.last_we_date) AND
             vmtableau.cve_data.date_cwe_added IS NULL
        THEN current_load.last_load_timestamp
        ELSE vmtableau.cve_data.date_cwe_added
    END
FROM current_load
JOIN previous_loads ON current_load.cve_id = previous_loads.cve_id
WHERE vmtableau.cve_data.cve_id = current_load.cve_id;






WITH current_load AS (
    SELECT *
    FROM vmtableau.cve_data
    WHERE last_load_timestamp = (SELECT MAX(last_load_timestamp) FROM vmtableau.cve_data)
),
previous_loads AS (
    SELECT
        cve_id,
        MAX(CASE WHEN CVSS IS NOT NULL AND CVSS <> '[]' THEN last_load_timestamp END) AS last_cvss_date,
        MAX(CASE WHEN cpe IS NOT NULL AND cpe <> '[]' THEN last_load_timestamp END) AS last_cpe_date,
        MAX(CASE WHEN we_id IS NOT NULL AND we_id <> '[]' THEN last_load_timestamp END) AS last_we_date
    FROM vmtableau.cve_data
    WHERE last_load_timestamp < (SELECT MAX(last_load_timestamp) FROM vmtableau.cve_data)
    GROUP BY cve_id
)
UPDATE vmtableau.cve_data
SET 
    date_cvss_added = CASE
        WHEN (current_load.CVSS IS NOT NULL AND current_load.CVSS <> '[]') AND
             (previous_loads.last_cvss_date IS NULL OR current_load.last_load_timestamp > previous_loads.last_cvss_date) AND
             vmtableau.cve_data.date_cvss_added IS NULL
        THEN current_load.last_load_timestamp
        ELSE vmtableau.cve_data.date_cvss_added
    END,
    date_cpe_added = CASE
        WHEN (current_load.cpe IS NOT NULL AND current_load.cpe <> '[]') AND
             (previous_loads.last_cpe_date IS NULL OR current_load.last_load_timestamp > previous_loads.last_cpe_date) AND
             vmtableau.cve_data.date_cpe_added IS NULL
        THEN current_load.last_load_timestamp
        ELSE vmtableau.cve_data.date_cpe_added
    END,
    date_cwe_added = CASE
        WHEN (current_load.cwe_id IS NOT NULL AND current_load.cwe_id <> '[]') AND
             (previous_loads.last_we_date IS NULL OR current_load.last_load_timestamp > previous_loads.last_we_date) AND
             vmtableau.cve_data.date_cwe_added IS NULL
        THEN current_load.last_load_timestamp
        ELSE vmtableau.cve_data.date_cwe_added
    END
FROM current_load
JOIN previous_loads ON current_load.cve_id = previous_loads.cve_id
WHERE vmtableau.cve_data.cve_id = current_load.cve_id;






WITH all_loads AS (
    SELECT DISTINCT last_load_timestamp
    FROM vmtableau.cve_data
    ORDER BY last_load_timestamp
),
current_load AS (
    SELECT *,
           ROW_NUMBER() OVER (ORDER BY last_load_timestamp DESC) AS rn
    FROM vmtableau.cve_data
),
previous_loads AS (
    SELECT
        cve_id,
        last_load_timestamp,
        MAX(CASE WHEN CVSS IS NOT NULL AND CVSS <> '[]' THEN last_load_timestamp END) AS last_cvss_date,
        MAX(CASE WHEN cpe IS NOT NULL AND cpe <> '[]' THEN last_load_timestamp END) AS last_cpe_date,
        MAX(CASE WHEN cwe_id IS NOT NULL AND cwe_id <> '[]' THEN last_load_timestamp END) AS last_cwe_date
    FROM vmtableau.cve_data
    WHERE last_load_timestamp < (SELECT last_load_timestamp FROM all_loads WHERE last_load_timestamp > vmtableau.cve_data.last_load_timestamp ORDER BY last_load_timestamp ASC LIMIT 1)
    GROUP BY cve_id, last_load_timestamp
)
UPDATE vmtableau.cve_data
SET 
    date_cvss_added = CASE
        WHEN (current_load.CVSS IS NOT NULL AND current_load.CVSS <> '[]') AND
             (previous_loads.last_cvss_date IS NULL OR current_load.last_load_timestamp > previous_loads.last_cvss_date) AND
             vmtableau.cve_data.date_cvss_added IS NULL
        THEN current_load.last_load_timestamp
        ELSE vmtableau.cve_data.date_cvss_added
    END,
    date_cpe_added = CASE
        WHEN (current_load.cpe IS NOT NULL AND current_load.cpe <> '[]') AND
             (previous_loads.last_cpe_date IS NULL OR current_load.last_load_timestamp > previous_loads.last_cpe_date) AND
             vmtableau.cve_data.date_cpe_added IS NULL
        THEN current_load.last_load_timestamp
        ELSE vmtableau.cve_data.date_cpe_added
    END,
    date_cwe_added = CASE
        WHEN (current_load.cwe_id IS NOT NULL AND current_load.cwe_id <> '[]') AND
             (previous_loads.last_cwe_date IS NULL OR current_load.last_load_timestamp > previous_loads.last_cwe_date) AND
             vmtableau.cve_data.date_cwe_added IS NULL
        THEN current_load.last_load_timestamp
        ELSE vmtableau.cve_data.date_cwe_added
    END
FROM vmtableau.cve_data
JOIN current_load ON vmtableau.cve_data.cve_id = current_load.cve_id
JOIN previous_loads ON current_load.cve_id = previous_loads.cve_id AND current_load.rn = previous_loads.rn + 1
WHERE vmtableau.cve_data.cve_id = current_load.cve_id;



WITH all_loads AS (
    SELECT DISTINCT last_load_timestamp
    FROM vmtableau.cve_data
    ORDER BY last_load_timestamp
),
current_load AS (
    SELECT *
    FROM vmtableau.cve_data
    WHERE last_load_timestamp = (SELECT MAX(last_load_timestamp) FROM vmtableau.cve_data)
),
previous_loads AS (
    SELECT
        cve_id,
        MAX(CASE WHEN CVSS IS NOT NULL AND CVSS <> '[]' THEN last_load_timestamp END) AS last_cvss_date,
        MAX(CASE WHEN cpe IS NOT NULL AND cpe <> '[]' THEN last_load_timestamp END) AS last_cpe_date,
        MAX(CASE WHEN cwe_id IS NOT NULL AND cwe_id <> '[]' THEN last_load_timestamp END) AS last_cwe_date
    FROM vmtableau.cve_data
    WHERE last_load_timestamp = (
        SELECT MAX(last_load_timestamp)
        FROM vmtableau.cve_data
        WHERE last_load_timestamp < current_load.last_load_timestamp
    )
    GROUP BY cve_id
)
UPDATE vmtableau.cve_data
SET 
    date_cvss_added = CASE
        WHEN (current_load.CVSS IS NOT NULL AND current_load.CVSS <> '[]') AND
             (previous_loads.last_cvss_date IS NULL OR current_load.last_load_timestamp > previous_loads.last_cvss_date) AND
             vmtableau.cve_data.date_cvss_added IS NULL
        THEN current_load.last_load_timestamp
        ELSE vmtableau.cve_data.date_cvss_added
    END,
    date_cpe_added = CASE
        WHEN (current_load.cpe IS NOT NULL AND current_load.cpe <> '[]') AND
             (previous_loads.last_cpe_date IS NULL OR current_load.last_load_timestamp > previous_loads.last_cpe_date) AND
             vmtableau.cve_data.date_cpe_added IS NULL
        THEN current_load.last_load_timestamp
        ELSE vmtableau.cve_data.date_cpe_added
    END,
    date_cwe_added = CASE
        WHEN (current_load.cwe_id IS NOT NULL AND current_load.cwe_id <> '[]') AND
             (previous_loads.last_cwe_date IS NULL OR current_load.last_load_timestamp > previous_loads.last_cwe_date) AND
             vmtableau.cve_data.date_cwe_added IS NULL
        THEN current_load.last_load_timestamp
        ELSE vmtableau.cve_data.date_cwe_added
    END
FROM vmtableau.cve_data
JOIN current_load ON vmtableau.cve_data.cve_id = current_load.cve_id
LEFT JOIN previous_loads ON current_load.cve_id = previous_loads.cve_id
WHERE vmtableau.cve_data.cve_id = current_load.cve_id;






WITH all_loads AS (
    SELECT DISTINCT last_load_timestamp
    FROM vmtableau.cve_data
    ORDER BY last_load_timestamp
),
current_load AS (
    SELECT *,
           ROW_NUMBER() OVER (ORDER BY last_load_timestamp DESC) AS rn
    FROM vmtableau.cve_data
),
previous_loads AS (
    SELECT
        cve_id,
        MAX(CASE WHEN CVSS IS NOT NULL AND CVSS <> '[]' THEN last_load_timestamp END) AS last_cvss_date,
        MAX(CASE WHEN cpe IS NOT NULL AND cpe <> '[]' THEN last_load_timestamp END) AS last_cpe_date,
        MAX(CASE WHEN cwe_id IS NOT NULL AND cwe_id <> '[]' THEN last_load_timestamp END) AS last_cwe_date
    FROM vmtableau.cve_data
    WHERE last_load_timestamp < (
        SELECT MAX(last_load_timestamp) 
        FROM all_loads 
        WHERE last_load_timestamp > vmtableau.cve_data.last_load_timestamp
    )
    GROUP BY cve_id
)
UPDATE vmtableau.cve_data
SET 
    date_cvss_added = CASE
        WHEN subquery.CVSS IS NOT NULL AND subquery.CVSS <> '[]' AND
             (subquery.last_cvss_date IS NULL OR subquery.last_load_timestamp > subquery.last_cvss_date) AND
             vmtableau.cve_data.date_cvss_added IS NULL
        THEN subquery.last_load_timestamp
        ELSE vmtableau.cve_data.date_cvss_added
    END,
    date_cpe_added = CASE
        WHEN subquery.cpe IS NOT NULL AND subquery.cpe <> '[]' AND
             (subquery.last_cpe_date IS NULL OR subquery.last_load_timestamp > subquery.last_cpe_date) AND
             vmtableau.cve_data.date_cpe_added IS NULL
        THEN subquery.last_load_timestamp
        ELSE vmtableau.cve_data.date_cpe_added
    END,
    date_cwe_added = CASE
        WHEN subquery.cwe_id IS NOT NULL AND subquery.cwe_id <> '[]' AND
             (subquery.last_cwe_date IS NULL OR subquery.last_load_timestamp > subquery.last_cwe_date) AND
             vmtableau.cve_data.date_cwe_added IS NULL
        THEN subquery.last_load_timestamp
        ELSE vmtableau.cve_data.date_cwe_added
    END
FROM (
    SELECT cl.cve_id, cl.CVSS, cl.cpe, cl.cwe_id, cl.last_load_timestamp,
           pl.last_cvss_date, pl.last_cpe_date, pl.last_cwe_date
    FROM current_load cl
    LEFT JOIN previous_loads pl ON cl.cve_id = pl.cve_id
    WHERE cl.rn = 1
) AS subquery
WHERE vmtableau.cve_data.cve_id = subquery.cve_id;




WITH current_load AS (
    SELECT *
    FROM vmtableau.cve_data
    WHERE last_load_timestamp = (SELECT MAX(last_load_timestamp) FROM vmtableau.cve_data)
),
ordered_loads AS (
    SELECT 
        cve_id,
        last_load_timestamp,
        CVSS,
        cpe,
        cwe_id,
        ROW_NUMBER() OVER (PARTITION BY cve_id ORDER BY last_load_timestamp) AS rn
    FROM vmtableau.cve_data
),
previous_loads AS (
    SELECT 
        current.cve_id,
        current.last_load_timestamp,
        MAX(CASE WHEN COALESCE(previous.CVSS, '') != '' THEN previous.last_load_timestamp END) AS last_cvss_date,
        MAX(CASE WHEN COALESCE(previous.cpe, '') != '' THEN previous.last_load_timestamp END) AS last_cpe_date,
        MAX(CASE WHEN COALESCE(previous.cwe_id, '') != '' THEN previous.last_load_timestamp END) AS last_cwe_date
    FROM ordered_loads current
    LEFT JOIN ordered_loads previous 
    ON current.cve_id = previous.cve_id AND previous.rn < current.rn
    GROUP BY current.cve_id, current.last_load_timestamp
)
UPDATE vmtableau.cve_data cd
SET 
    date_cvss_added = COALESCE(
        CASE 
            WHEN COALESCE(cl.CVSS, '') != '' 
                 AND (pl.last_cvss_date IS NULL OR cl.last_load_timestamp > pl.last_cvss_date) 
                 AND cd.date_cvss_added IS NULL
            THEN cl.last_load_timestamp 
        END,
        cd.date_cvss_added
    ),
    date_cpe_added = COALESCE(
        CASE 
            WHEN COALESCE(cl.cpe, '') != '' 
                 AND (pl.last_cpe_date IS NULL OR cl.last_load_timestamp > pl.last_cpe_date) 
                 AND cd.date_cpe_added IS NULL
            THEN cl.last_load_timestamp 
        END,
        cd.date_cpe_added
    ),
    date_cwe_added = COALESCE(
        CASE 
            WHEN COALESCE(cl.cwe_id, '') != '' 
                 AND (pl.last_cwe_date IS NULL OR cl.last_load_timestamp > pl.last_cwe_date) 
                 AND cd.date_cwe_added IS NULL
            THEN cl.last_load_timestamp 
        END,
        cd.date_cwe_added
    )
FROM vmtableau.cve_data cd
JOIN current_load cl ON cd.cve_id = cl.cve_id
JOIN previous_loads pl ON cl.cve_id = pl.cve_id AND cl.last_load_timestamp = pl.last_load_timestamp;




WITH current_load AS (
    SELECT *
    FROM vmtableau.cve_data
    WHERE last_load_timestamp = (SELECT MAX(last_load_timestamp) FROM vmtableau.cve_data)
),
ordered_loads AS (
    SELECT 
        cve_id,
        last_load_timestamp,
        CVSS,
        cpe,
        cwe_id,
        ROW_NUMBER() OVER (PARTITION BY cve_id ORDER BY last_load_timestamp) AS rn
    FROM vmtableau.cve_data
),
previous_loads AS (
    SELECT 
        current.cve_id,
        current.last_load_timestamp,
        MAX(CASE WHEN COALESCE(previous.CVSS, '') != '' THEN previous.last_load_timestamp END) AS last_cvss_date,
        MAX(CASE WHEN COALESCE(previous.cpe, '') != '' THEN previous.last_load_timestamp END) AS last_cpe_date,
        MAX(CASE WHEN COALESCE(previous.cwe_id, '') != '' THEN previous.last_load_timestamp END) AS last_cwe_date
    FROM ordered_loads current
    LEFT JOIN ordered_loads previous 
    ON current.cve_id = previous.cve_id AND previous.rn < current.rn
    GROUP BY current.cve_id, current.last_load_timestamp
)
UPDATE vmtableau.cve_data AS cd
SET 
    date_cvss_added = COALESCE(
        CASE 
            WHEN COALESCE(cl.CVSS, '') != '' 
                 AND (pl.last_cvss_date IS NULL OR cl.last_load_timestamp > pl.last_cvss_date) 
                 AND cd.date_cvss_added IS NULL
            THEN cl.last_load_timestamp 
        END,
        cd.date_cvss_added
    ),
    date_cpe_added = COALESCE(
        CASE 
            WHEN COALESCE(cl.cpe, '') != '' 
                 AND (pl.last_cpe_date IS NULL OR cl.last_load_timestamp > pl.last_cpe_date) 
                 AND cd.date_cpe_added IS NULL
            THEN cl.last_load_timestamp 
        END,
        cd.date_cpe_added
    ),
    date_cwe_added = COALESCE(
        CASE 
            WHEN COALESCE(cl.cwe_id, '') != '' 
                 AND (pl.last_cwe_date IS NULL OR cl.last_load_timestamp > pl.last_cwe_date) 
                 AND cd.date_cwe_added IS NULL
            THEN cl.last_load_timestamp 
        END,
        cd.date_cwe_added
    )
FROM current_load cl
JOIN previous_loads pl 
    ON cl.cve_id = pl.cve_id 
    AND cl.last_load_timestamp = pl.last_load_timestamp
WHERE cd.cve_id = cl.cve_id
  AND cd.last_load_timestamp = cl.last_load_timestamp;





WITH current_load AS (
    SELECT *
    FROM vmtableau.cve_data
    WHERE last_load_timestamp = (SELECT MAX(last_load_timestamp) FROM vmtableau.cve_data)
),
ordered_loads AS (
    SELECT 
        cve_id,
        last_load_timestamp,
        CVSS,
        cpe,
        cwe_id,
        ROW_NUMBER() OVER (PARTITION BY cve_id ORDER BY last_load_timestamp) AS rn
    FROM vmtableau.cve_data
),
previous_loads AS (
    SELECT 
        current.cve_id,
        current.last_load_timestamp,
        MAX(CASE WHEN COALESCE(previous.CVSS, '') != '' THEN previous.last_load_timestamp END) AS last_cvss_date,
        MAX(CASE WHEN COALESCE(previous.cpe, '') != '' THEN previous.last_load_timestamp END) AS last_cpe_date,
        MAX(CASE WHEN COALESCE(previous.cwe_id, '') != '' THEN previous.last_load_timestamp END) AS last_cwe_date
    FROM ordered_loads current
    LEFT JOIN ordered_loads previous 
    ON current.cve_id = previous.cve_id AND previous.rn < current.rn
    GROUP BY current.cve_id, current.last_load_timestamp
)
UPDATE vmtableau.cve_data
SET 
    date_cvss_added = COALESCE(
        CASE 
            WHEN COALESCE(cl.CVSS, '') != '' 
                 AND (pl.last_cvss_date IS NULL OR cl.last_load_timestamp > pl.last_cvss_date) 
                 AND vmtableau.cve_data.date_cvss_added IS NULL
            THEN cl.last_load_timestamp 
        END,
        vmtableau.cve_data.date_cvss_added
    ),
    date_cpe_added = COALESCE(
        CASE 
            WHEN COALESCE(cl.cpe, '') != '' 
                 AND (pl.last_cpe_date IS NULL OR cl.last_load_timestamp > pl.last_cpe_date) 
                 AND vmtableau.cve_data.date_cpe_added IS NULL
            THEN cl.last_load_timestamp 
        END,
        vmtableau.cve_data.date_cpe_added
    ),
    date_cwe_added = COALESCE(
        CASE 
            WHEN COALESCE(cl.cwe_id, '') != '' 
                 AND (pl.last_cwe_date IS NULL OR cl.last_load_timestamp > pl.last_cwe_date) 
                 AND vmtableau.cve_data.date_cwe_added IS NULL
            THEN cl.last_load_timestamp 
        END,
        vmtableau.cve_data.date_cwe_added
    )
FROM current_load cl
JOIN previous_loads pl 
    ON cl.cve_id = pl.cve_id 
    AND cl.last_load_timestamp = pl.last_load_timestamp
WHERE vmtableau.cve_data.cve_id = cl.cve_id
  AND vmtableau.cve_data.last_load_timestamp = cl.last_load_timestamp;





WITH ordered_loads AS (
    SELECT 
        cve_id,
        last_load_timestamp,
        CVSS,
        cpe,
        cwe_id,
        ROW_NUMBER() OVER (PARTITION BY cve_id ORDER BY last_load_timestamp) AS rn
    FROM vmtableau.cve_data
),
first_occurrences AS (
    SELECT 
        cve_id,
        MIN(CASE WHEN COALESCE(CVSS, '') != '' THEN last_load_timestamp END) AS first_cvss_date,
        MIN(CASE WHEN COALESCE(cpe, '') != '' THEN last_load_timestamp END) AS first_cpe_date,
        MIN(CASE WHEN COALESCE(cwe_id, '') != '' THEN last_load_timestamp END) AS first_cwe_date
    FROM ordered_loads
    GROUP BY cve_id
)
UPDATE vmtableau.cve_data AS cd
SET 
    date_cvss_added = COALESCE(
        CASE 
            WHEN COALESCE(cd.CVSS, '') != '' AND
                 (fo.first_cvss_date IS NOT NULL AND cd.last_load_timestamp >= fo.first_cvss_date) 
            THEN fo.first_cvss_date 
        END,
        cd.date_cvss_added
    ),
    date_cpe_added = COALESCE(
        CASE 
            WHEN COALESCE(cd.cpe, '') != '' AND
                 (fo.first_cpe_date IS NOT NULL AND cd.last_load_timestamp >= fo.first_cpe_date) 
            THEN fo.first_cpe_date 
        END,
        cd.date_cpe_added
    ),
    date_cwe_added = COALESCE(
        CASE 
            WHEN COALESCE(cd.cwe_id, '') != '' AND
                 (fo.first_cwe_date IS NOT NULL AND cd.last_load_timestamp >= fo.first_cwe_date) 
            THEN fo.first_cwe_date 
        END,
        cd.date_cwe_added
    )
FROM first_occurrences fo
WHERE cd.cve_id = fo.cve_id;




WITH ordered_loads AS (
    SELECT 
        cve_id,
        last_load_timestamp,
        CVSS,
        cpe,
        cwe_id,
        ROW_NUMBER() OVER (PARTITION BY cve_id ORDER BY last_load_timestamp) AS rn
    FROM vmtableau.cve_data
),
first_occurrences AS (
    SELECT 
        cve_id,
        MIN(CASE WHEN COALESCE(CVSS, '') != '' THEN last_load_timestamp END) AS first_cvss_date,
        MIN(CASE WHEN COALESCE(cpe, '') != '' THEN last_load_timestamp END) AS first_cpe_date,
        MIN(CASE WHEN COALESCE(cwe_id, '') != '' THEN last_load_timestamp END) AS first_cwe_date
    FROM ordered_loads
    GROUP BY cve_id
)
UPDATE vmtableau.cve_data
SET 
    date_cvss_added = COALESCE(
        CASE 
            WHEN COALESCE(vmtableau.cve_data.CVSS, '') != '' AND
                 (fo.first_cvss_date IS NOT NULL AND vmtableau.cve_data.last_load_timestamp >= fo.first_cvss_date) 
            THEN fo.first_cvss_date 
        END,
        vmtableau.cve_data.date_cvss_added
    ),
    date_cpe_added = COALESCE(
        CASE 
            WHEN COALESCE(vmtableau.cve_data.cpe, '') != '' AND
                 (fo.first_cpe_date IS NOT NULL AND vmtableau.cve_data.last_load_timestamp >= fo.first_cpe_date) 
            THEN fo.first_cpe_date 
        END,
        vmtableau.cve_data.date_cpe_added
    ),
    date_cwe_added = COALESCE(
        CASE 
            WHEN COALESCE(vmtableau.cve_data.cwe_id, '') != '' AND
                 (fo.first_cwe_date IS NOT NULL AND vmtableau.cve_data.last_load_timestamp >= fo.first_cwe_date) 
            THEN fo.first_cwe_date 
        END,
        vmtableau.cve_data.date_cwe_added
    )
FROM first_occurrences fo
WHERE vmtableau.cve_data.cve_id = fo.cve_id;



WITH ordered_loads AS (
    SELECT 
        cve_id,
        last_load_timestamp,
        CVSS,
        cpe,
        cwe_id,
        ROW_NUMBER() OVER (PARTITION BY cve_id ORDER BY last_load_timestamp) AS rn
    FROM vmtableau.cve_data
),
first_occurrences AS (
    SELECT 
        cve_id,
        MIN(CASE WHEN COALESCE(CVSS, '', '{}') != '' THEN last_load_timestamp END) AS first_cvss_date,
        MIN(CASE WHEN COALESCE(cpe, '', '{}') != '' THEN last_load_timestamp END) AS first_cpe_date,
        MIN(CASE WHEN COALESCE(cwe_id, '', '{}') != '' THEN last_load_timestamp END) AS first_cwe_date
    FROM ordered_loads
    GROUP BY cve_id
)
UPDATE vmtableau.cve_data
SET 
    date_cvss_added = COALESCE(
        CASE 
            WHEN COALESCE(vmtableau.cve_data.CVSS, '', '{}') != '' AND
                 (fo.first_cvss_date IS NOT NULL AND vmtableau.cve_data.last_load_timestamp >= fo.first_cvss_date) 
            THEN fo.first_cvss_date 
        END,
        vmtableau.cve_data.date_cvss_added
    ),
    date_cpe_added = COALESCE(
        CASE 
            WHEN COALESCE(vmtableau.cve_data.cpe, '', '{}') != '' AND
                 (fo.first_cpe_date IS NOT NULL AND vmtableau.cve_data.last_load_timestamp >= fo.first_cpe_date) 
            THEN fo.first_cpe_date 
        END,
        vmtableau.cve_data.date_cpe_added
    ),
    date_cwe_added = COALESCE(
        CASE 
            WHEN COALESCE(vmtableau.cve_data.cwe_id, '', '{}') != '' AND
                 (fo.first_cwe_date IS NOT NULL AND vmtableau.cve_data.last_load_timestamp >= fo.first_cwe_date) 
            THEN fo.first_cwe_date 
        END,
        vmtableau.cve_data.date_cwe_added
    )
FROM first_occurrences fo
WHERE vmtableau.cve_data.cve_id = fo.cve_id;





WITH ordered_loads AS (
    SELECT 
        cve_id,
        last_load_timestamp,
        CVSS,
        cpe,
        cwe_id,
        ROW_NUMBER() OVER (PARTITION BY cve_id ORDER BY last_load_timestamp) AS rn
    FROM vmtableau.cve_data
),
first_occurrences AS (
    SELECT 
        cve_id,
        MIN(CASE 
                WHEN (COALESCE(CVSS, '') != '' AND COALESCE(CAST(CVSS AS VARCHAR), '') != '[]') 
                THEN last_load_timestamp 
            END) AS first_cvss_date,
        MIN(CASE 
                WHEN (COALESCE(cpe, '') != '' AND COALESCE(CAST(cpe AS VARCHAR), '') != '[]') 
                THEN last_load_timestamp 
            END) AS first_cpe_date,
        MIN(CASE 
                WHEN (COALESCE(cwe_id, '') != '' AND COALESCE(CAST(cwe_id AS VARCHAR), '') != '[]') 
                THEN last_load_timestamp 
            END) AS first_cwe_date
    FROM ordered_loads
    GROUP BY cve_id
)
UPDATE vmtableau.cve_data
SET 
    date_cvss_added = COALESCE(
        CASE 
            WHEN (COALESCE(vmtableau.cve_data.CVSS, '') != '' AND COALESCE(CAST(vmtableau.cve_data.CVSS AS VARCHAR), '') != '[]') AND
                 (fo.first_cvss_date IS NOT NULL AND vmtableau.cve_data.last_load_timestamp >= fo.first_cvss_date) 
            THEN fo.first_cvss_date 
        END,
        vmtableau.cve_data.date_cvss_added
    ),
    date_cpe_added = COALESCE(
        CASE 
            WHEN (COALESCE(vmtableau.cve_data.cpe, '') != '' AND COALESCE(CAST(vmtableau.cve_data.cpe AS VARCHAR), '') != '[]') AND
                 (fo.first_cpe_date IS NOT NULL AND vmtableau.cve_data.last_load_timestamp >= fo.first_cpe_date) 
            THEN fo.first_cpe_date 
        END,
        vmtableau.cve_data.date_cpe_added
    ),
    date_cwe_added = COALESCE(
        CASE 
            WHEN (COALESCE(vmtableau.cve_data.cwe_id, '') != '' AND COALESCE(CAST(vmtableau.cve_data.cwe_id AS VARCHAR), '') != '[]') AND
                 (fo.first_cwe_date IS NOT NULL AND vmtableau.cve_data.last_load_timestamp >= fo.first_cwe_date) 
            THEN fo.first_cwe_date 
        END,
        vmtableau.cve_data.date_cwe_added
    )
FROM first_occurrences fo
WHERE vmtableau.cve_data.cve_id = fo.cve_id;



WITH ordered_loads AS (
    SELECT 
        cve_id,
        last_load_timestamp,
        CVSS,
        cpe,
        cwe_id,
        ROW_NUMBER() OVER (PARTITION BY cve_id ORDER BY last_load_timestamp) AS rn
    FROM vmtableau.cve_data
),
first_occurrences AS (
    SELECT 
        cve_id,
        MIN(CASE 
                WHEN COALESCE(CVSS, '') != '' AND CVSS IS NOT NULL THEN last_load_timestamp 
            END) AS first_cvss_date,
        MIN(CASE 
                WHEN COALESCE(array_to_string(cpe, ''), '') != '' AND cpe IS NOT NULL THEN last_load_timestamp 
            END) AS first_cpe_date,
        MIN(CASE 
                WHEN COALESCE(CWE_ID, '') != '' AND CWE_ID IS NOT NULL THEN last_load_timestamp 
            END) AS first_cwe_date
    FROM ordered_loads
    GROUP BY cve_id
)
UPDATE vmtableau.cve_data
SET 
    date_cvss_added = COALESCE(
        CASE 
            WHEN COALESCE(vmtableau.cve_data.CVSS, '') != '' AND vmtableau.cve_data.CVSS IS NOT NULL AND
                 (fo.first_cvss_date IS NOT NULL AND vmtableau.cve_data.last_load_timestamp >= fo.first_cvss_date) 
            THEN fo.first_cvss_date 
        END,
        vmtableau.cve_data.date_cvss_added
    ),
    date_cpe_added = COALESCE(
        CASE 
            WHEN COALESCE(array_to_string(vmtableau.cve_data.cpe, ''), '') != '' AND vmtableau.cve_data.cpe IS NOT NULL AND
                 (fo.first_cpe_date IS NOT NULL AND vmtableau.cve_data.last_load_timestamp >= fo.first_cpe_date) 
            THEN fo.first_cpe_date 
        END,
        vmtableau.cve_data.date_cpe_added
    ),
    date_cwe_added = COALESCE(
        CASE 
            WHEN COALESCE(vmtableau.cve_data.cwe_id, '') != '' AND vmtableau.cve_data.cwe_id IS NOT NULL AND
                 (fo.first_cwe_date IS NOT NULL AND vmtableau.cve_data.last_load_timestamp >= fo.first_cwe_date) 
            THEN fo.first_cwe_date 
        END,
        vmtableau.cve_data.date_cwe_added
    )
FROM first_occurrences fo
WHERE vmtableau.cve_data.cve_id = fo.cve_id;


