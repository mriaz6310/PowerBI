# Ensure all paths are correct and files exist
missing_files = [script for script in scripts if not os.path.isfile(script)]

if missing_files:
    print(f"Error: The following files do not exist: {missing_files}")
    raise FileNotFoundError(f"Files not found: {missing_files}")
else:
    print("All script files exist and are ready for execution.")

def run_python_script_with_conda(script_name):
    # Log file for each individual script
    log_file = os.path.join(log_directory, f'{os.path.basename(script_name).replace(".py", "")}.log')

    try:
        print(f"Running {script_name}...")

        # Ensure paths are quoted properly for bash commands
        bash_command = f'source "{conda_bin_path}" && conda activate {conda_env_name} && python3 "{script_name}"'
        
        # Run the Python script with Conda environment activation in a bash shell
        result = subprocess.run(
            ['bash', '-c', bash_command],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True
        )

        # Write the script output to a log file
        with open(log_file, 'w') as log_output:
            log_output.write(result.stdout + result.stderr)

        print(f"{script_name} finished with return code {result.returncode}")

        # Return the return code for success/failure
        return result.returncode

    except Exception as e:
        print(f"Error running {script_name}: {e}")
        return None

# Write to master log
with open(master_log_file, 'w') as master_log:
    master_log.write("Script Name   | Status       | Completion Time\n")
    master_log.write("-" * 50 + "\n")

    for script in scripts:
        start_time = datetime.now()

        try:
            # Run each Python script with environment activation
            return_code = run_python_script_with_conda(script)

            end_time = datetime.now()
            completion_time = (end_time - start_time).total_seconds()

            # Determine success or failure
            if return_code == 0:
                status = "Success"
            elif return_code is not None:
                status = f"Failed (Code: {return_code})"
            else:
                status = "Error Occurred"

            # Log result in master log
            master_log.write(f"{os.path.basename(script)} | {status:<12} | {completion_time:.2f} seconds\n")
            print(f"Logged result for {script} in master log.")

        except Exception as e:
            print(f"Error during execution of script {script}: {e}")
            master_log.write(f"{os.path.basename(script)} | Error Occurred | N/A\n")
            continue  # Continue to the next script if one fails








# Ensure all script paths are correct and the files exist
missing_files = [script for script in scripts if not os.path.isfile(script)]

if missing_files:
    print(f"Error: The following files do not exist: {missing_files}")
    raise FileNotFoundError(f"Files not found: {missing_files}")
else:
    print("All script files exist and are ready for execution.")

def run_python_script_with_conda(script_name):
    try:
        print(f"Running {script_name}...")

        # Build the bash command with proper paths
        bash_command = f'source "{conda_bin_path}" && conda activate {conda_env_name} && python3 "{script_name}"'
        
        # Run the Python script with Conda environment activation in a bash shell
        result = subprocess.run(
            ['bash', '-c', bash_command],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True
        )

        # Print the output and return code
        print(result.stdout)
        if result.stderr:
            print(f"Error in {script_name}: {result.stderr}")
        
        print(f"{script_name} finished with return code {result.returncode}")

        return result.returncode

    except Exception as e:
        print(f"Error running {script_name}: {e}")
        return None

# Run all scripts without logging to a file, just print results
for script in scripts:
    start_time = datetime.now()

    try:
        # Run each Python script with Conda environment activation
        return_code = run_python_script_with_conda(script)

        end_time = datetime.now()
        completion_time = (end_time - start_time).total_seconds()

        # Determine success or failure
        if return_code == 0:
            print(f"{script} completed successfully in {completion_time:.2f} seconds.")
        elif return_code is not None:
            print(f"{script} failed with code {return_code}.")
        else:
            print(f"An error occurred while running {script}.")

    except Exception as e:
        print(f"Error during execution of script {script}: {e}")








import subprocess
import os
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor, as_completed

# Path to your Python scripts (Ensure these are the correct absolute paths)
scripts = [
    '/home/user/SageMaker/Production/Pipelines/pipeline/dashboard/src/temp-dashboard-product-refresh-pipe-py.py',
    '/home/user/SageMaker/Production/Pipelines/pipeline/dashboard/src/another-script.py',
    '/home/user/SageMaker/Production/Pipelines/pipeline/dashboard/src/yet-another-script.py',
    '/home/user/SageMaker/Production/Pipelines/pipeline/dashboard/src/fourth-script.py',
    '/home/user/SageMaker/Production/Pipelines/pipeline/dashboard/src/fifth-script.py'
]

# Log directory
log_directory = '/home/user/logs'  # Update this to the correct path
if not os.path.exists(log_directory):
    os.makedirs(log_directory)  # Create log directory if it doesn't exist

# Master log file
master_log_file = '/home/user/logs/master_log.txt'

# Path to Conda environment activation script
conda_bin_path = '/home/user/SageMaker/custom-conda/miniconda/bin/activate'
conda_env_name = 'ABC_PROD'

# Ensure all script paths are correct and the files exist
missing_files = [script for script in scripts if not os.path.isfile(script)]

if missing_files:
    print(f"Error: The following files do not exist: {missing_files}")
    raise FileNotFoundError(f"Files not found: {missing_files}")
else:
    print("All script files exist and are ready for execution.")

def run_python_script_with_conda(script_name):
    # Log file for each individual script
    log_file = os.path.join(log_directory, f'{os.path.basename(script_name).replace(".py", "")}.log')

    try:
        print(f"Running {script_name}...")

        # Build the bash command with proper paths
        bash_command = f'source "{conda_bin_path}" && conda activate {conda_env_name} && python3 "{script_name}"'
        
        # Run the Python script with Conda environment activation in a bash shell
        result = subprocess.run(
            ['bash', '-c', bash_command],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True
        )

        # Write the script output to a log file
        with open(log_file, 'w') as log_output:
            log_output.write(result.stdout)
            log_output.write(result.stderr)

        # Print and return the result
        print(f"{script_name} finished with return code {result.returncode}")

        return result.returncode

    except Exception as e:
        print(f"Error running {script_name}: {e}")
        return None

# Write to master log file
with open(master_log_file, 'w') as master_log:
    master_log.write("Script Name   | Status       | Completion Time (seconds) | Completion Timestamp\n")
    master_log.write("-" * 75 + "\n")

    # Using ThreadPoolExecutor to run two scripts at a time
    with ThreadPoolExecutor(max_workers=2) as executor:
        # Submit all scripts for parallel execution
        future_to_script = {executor.submit(run_python_script_with_conda, script): script for script in scripts}

        for future in as_completed(future_to_script):
            script = future_to_script[future]
            start_time = datetime.now()

            try:
                # Wait for each script to complete and get the return code
                return_code = future.result()

                end_time = datetime.now()
                completion_time = (end_time - start_time).total_seconds()

                # Timestamp of completion
                timestamp = end_time.strftime('%Y-%m-%d %H:%M:%S')

                # Determine success or failure
                if return_code == 0:
                    status = "Success"
                elif return_code is not None:
                    status = f"Failed (Code: {return_code})"
                else:
                    status = "Error Occurred"

                # Log result in master log with timestamp
                master_log.write(f"{os.path.basename(script)} | {status:<12} | {completion_time:.2f} seconds | {timestamp}\n")
                print(f"Logged result for {script} in master log with timestamp {timestamp}.")

            except Exception as e:
                print(f"Error during execution of script {script}: {e}")
                timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                master_log.write(f"{os.path.basename(script)} | Error Occurred | N/A | {timestamp}\n")
                continue  # Move to the next script if one fails

