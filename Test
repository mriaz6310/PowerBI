-- This will output DROP + CREATE SERVER and CREATE USER MAPPING commands
WITH srv AS (
  SELECT
    s.oid,
    s.srvname,
    w.fdwname,
    CASE
      WHEN s.srvoptions IS NULL THEN ''
      ELSE ' OPTIONS (' ||
           array_to_string(
             ARRAY(
               SELECT quote_ident(split_part(o,'=',1)) || ' ' ||
                      quote_literal(substring(o from position('=' in o)+1))
               FROM unnest(s.srvoptions) AS o
             ), ', '
           ) || ')'
    END AS optstr
  FROM pg_foreign_server s
  JOIN pg_foreign_data_wrapper w ON w.oid = s.srvfdw
)
SELECT
  'DROP SERVER IF EXISTS ' || quote_ident(srvname) || ' CASCADE;'
FROM srv
UNION ALL
SELECT
  'CREATE SERVER ' || quote_ident(srvname) ||
  ' FOREIGN DATA WRAPPER ' || quote_ident(fdwname) || optstr || ';'
FROM srv
UNION ALL
SELECT
  'CREATE USER MAPPING FOR ' ||
  CASE WHEN m.umuser = 0 THEN 'PUBLIC' ELSE quote_ident(r.rolname) END ||
  ' SERVER ' || quote_ident(s.srvname) ||
  CASE
    WHEN m.umoptions IS NULL THEN ''
    ELSE ' OPTIONS (' ||
         array_to_string(
           ARRAY(
             SELECT quote_ident(split_part(o,'=',1)) || ' ' ||
                    quote_literal(substring(o from position('=' in o)+1))
             FROM unnest(m.umoptions) AS o
           ), ', '
         ) || ')'
  END || ';'
FROM pg_user_mappings m
JOIN pg_foreign_server s ON s.oid = m.srvid
LEFT JOIN pg_roles r ON r.oid = m.umuser
ORDER BY 1;




USE NPA;
GO
SELECT 
    name AS logical_name, 
    physical_name
FROM sys.database_files
WHERE type_desc = 'ROWS'   -- data files (includes .mdf + .ndf)
  AND RIGHT(physical_name,4) = '.ndf'
ORDER BY file_id;


USE NPA;
GO
DECLARE @OldPath NVARCHAR(260) = N'E:\SQLData\NPA';   -- current folder
DECLARE @NewPath NVARCHAR(260) = N'G:\SQLData\NPA';   -- new folder

SELECT 
    'ALTER DATABASE NPA MODIFY FILE (NAME = ' + QUOTENAME(df.name,'''')
    + ', FILENAME = ' + QUOTENAME(REPLACE(df.physical_name, @OldPath, @NewPath),'''') 
    + ');' AS cmd
FROM sys.database_files df
WHERE type_desc = 'ROWS'
  AND RIGHT(df.physical_name,4) = '.ndf'
ORDER BY file_id;




SELECT
    identity_name AS user_name,
    namespace_name AS schema_name,
    relation_name AS object_name,
    privilege_type AS privilege,
    identity_type AS user_type
FROM SVV_RELATION_PRIVILEGES
WHERE identity_name = 'prof_afm_g'
  AND namespace_name = 'abcdm'
  AND relation_name LIKE 'vw%'
ORDER BY user_name, schema_name, object_name;




object permisisons:

-- Extract object-level grants for tables/views/matviews/sequences
SELECT format(
         'GRANT %s ON %s %I.%I TO %s;',
         priv.privilege_type,
         CASE c.relkind
           WHEN 'r' THEN 'TABLE'
           WHEN 'v' THEN 'VIEW'
           WHEN 'm' THEN 'MATERIALIZED VIEW'
           WHEN 'S' THEN 'SEQUENCE'
           WHEN 'f' THEN 'FOREIGN TABLE'
           ELSE 'TABLE'
         END,
         n.nspname,
         c.relname,
         CASE WHEN g.grantee = 0 THEN 'PUBLIC' ELSE quote_ident(r.rolname) END
       ) AS ddl
FROM pg_class c
JOIN pg_namespace n ON n.oid = c.relnamespace
LEFT JOIN LATERAL aclexplode(c.relacl) g ON TRUE
LEFT JOIN pg_roles r ON r.oid = g.grantee
CROSS JOIN LATERAL unnest(g.privilege_types) AS priv(privilege_type)
WHERE n.nspname NOT IN ('pg_catalog','information_schema')
  AND n.nspname NOT LIKE 'pg_toast%'
ORDER BY n.nspname, c.relname, r.rolname;
