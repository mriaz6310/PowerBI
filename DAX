SELECT 
  'GRANT "' || pg_get_userbyid(roleid) || '" TO "' || pg_get_userbyid(member) || '";'
FROM pg_auth_members
WHERE pg_get_userbyid(roleid) NOT IN ('postgres', 'rdsadmin', 'rdsproxy')
  AND pg_get_userbyid(member) NOT IN ('postgres', 'rdsadmin', 'rdsproxy')
ORDER BY 1;


SELECT 
  'GRANT ' || privilege_type || ' ON "' || table_schema || '"."' || table_name || '" TO "' || grantee || '";'
FROM information_schema.role_table_grants
WHERE grantee NOT IN ('postgres', 'rdsadmin', 'rdsproxy')
ORDER BY grantee, table_schema, table_name;



SELECT 
  'GRANT USAGE ON SCHEMA "' || n.nspname || '" TO "' || r.rolname || '";'
FROM pg_roles r
CROSS JOIN pg_namespace n
WHERE n.nspname NOT LIKE 'pg_%'
  AND n.nspname <> 'information_schema'
  AND r.rolname NOT IN ('postgres', 'rdsadmin', 'rdsproxy')
ORDER BY 1;


SELECT 
  n.nspname AS schema_name,
  'postgrestestadm' AS grantee,
  has_schema_privilege('postgrestestadm', n.nspname, 'USAGE') AS has_usage,
  has_schema_privilege('postgrestestadm', n.nspname, 'CREATE') AS has_create
FROM pg_namespace n
WHERE n.nspname NOT LIKE 'pg_%'
  AND n.nspname <> 'information_schema'
ORDER BY n.nspname;






BEGIN
  rdsadmin.rdsadmin_util.create_directory(
    p_directory_name => 'DATA_PUMP_DIR'
  );
END;
/

-- Then run your Data Pump job via PL/SQL or SQL Developer


BEGIN
  rdsadmin.rdsadmin_util.export_rds_datafile(
    p_directory_name => 'DATA_PUMP_DIR',
    p_prefix         => 'my_export',
    p_parallel       => 2,
    p_compression    => 'ALL'
  );
END;
/


