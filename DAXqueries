# Create role if not exists
$roleCheckCmd = "DO \$\$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'postgresadmin') THEN CREATE ROLE postgresadmin WITH LOGIN SUPERUSER; END IF; END \$\$;"
& "$PSQL" -h $PGHOST -p $PGPORT -U $PGUSER -d postgres -c $roleCheckCmd

foreach ($db in $databases) {
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $logFile = Join-Path $LOG_ROOT "$db-restore-$timestamp.log"
    $dumpPath = Join-Path $DUMP_ROOT $db

    if (!(Test-Path $dumpPath)) {
        Write-Warning "üö´ Dump path not found for $db. Skipping..."
        continue
    }

    Write-Host "`nüßπ Dropping and recreating DB: $db" | Tee-Object -FilePath $logFile -Append
    & "$PSQL" -h $PGHOST -p $PGPORT -U $PGUSER -d postgres -c "DROP DATABASE IF EXISTS $db;" 2>&1 | Tee-Object -FilePath $logFile -Append
    & "$PSQL" -h $PGHOST -p $PGPORT -U $PGUSER -d postgres -c "CREATE DATABASE $db;" 2>&1 | Tee-Object -FilePath $logFile -Append
    Start-Sleep -Seconds 2

    # Build schema restore args
    $schemaArgs = @(
        "-h", $PGHOST,
        "-p", $PGPORT,
        "-U", $PGUSER,
        "-d", $db,
        "-Fd", "`"$dumpPath`"",
        "--no-owner",
        "-s",
        "-j", "1"
    )

    Write-Host "üìê Restoring schema for $db..." | Tee-Object -FilePath $logFile -Append
    Start-Process -FilePath $PG_RESTORE -ArgumentList $schemaArgs -NoNewWindow -Wait -RedirectStandardOutput $logFile -RedirectStandardError $logFile

    # Build data restore args
    $dataArgs = @(
        "-h", $PGHOST,
        "-p", $PGPORT,
        "-U", $PGUSER,
        "-d", $db,
        "-Fd", "`"$dumpPath`"",
        "--no-owner",
        "-a",
        "-j", "8"
    )

    Write-Host "üì¶ Restoring data for $db..." | Tee-Object -FilePath $logFile -Append
    Start-Process -FilePath $PG_RESTORE -ArgumentList $dataArgs -NoNewWindow -Wait -RedirectStandardOutput $logFile -RedirectStandardError $logFile

    Write-Host "‚úÖ Finished restoring $db" | Tee-Object -FilePath $logFile -Append
}
