# Ensure the 'postgresadmin' role exists
$roleCheckCmd = "DO \$\$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'postgresadmin') THEN CREATE ROLE postgresadmin WITH LOGIN SUPERUSER; END IF; END \$\$;"
& "$PSQL" -h $PGHOST -p $PGPORT -U $PGUSER -d postgres -c $roleCheckCmd

foreach ($db in $databases) {
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $dumpPath = Join-Path $DUMP_ROOT $db
    $outLog = Join-Path $LOG_ROOT "$db-restore-$timestamp.out.log"
    $errLog = Join-Path $LOG_ROOT "$db-restore-$timestamp.err.log"

    if (!(Test-Path $dumpPath)) {
        Write-Warning "üö´ Dump path not found for $db. Skipping..."
        continue
    }

    Write-Host "`nüßπ Dropping and recreating DB: $db"
    & "$PSQL" -h $PGHOST -p $PGPORT -U $PGUSER -d postgres -c "DROP DATABASE IF EXISTS $db;"
    & "$PSQL" -h $PGHOST -p $PGPORT -U $PGUSER -d postgres -c "CREATE DATABASE $db;"
    Start-Sleep -Seconds 2

    # --- Schema Restore ---
    $schemaArgs = @(
        "-h", $PGHOST,
        "-p", $PGPORT,
        "-U", $PGUSER,
        "-d", $db,
        "-Fd", "`"$dumpPath`"",
        "--no-owner",
        "-s",
        "-j", "1"
    )
    Write-Host "üìê Restoring schema for $db..."
    Start-Process -FilePath $PG_RESTORE -ArgumentList $schemaArgs -NoNewWindow -Wait `
        -RedirectStandardOutput $outLog `
        -RedirectStandardError $errLog

    # --- Data Restore ---
    $dataArgs = @(
        "-h", $PGHOST,
        "-p", $PGPORT,
        "-U", $PGUSER,
        "-d", $db,
        "-Fd", "`"$dumpPath`"",
        "--no-owner",
        "-a",
        "-j", "8"
    )
    Write-Host "üì¶ Restoring data for $db..."
    Start-Process -FilePath $PG_RESTORE -ArgumentList $dataArgs -NoNewWindow -Wait `
        -RedirectStandardOutput $outLog `
        -RedirectStandardError $errLog

    Write-Host "‚úÖ Completed restoring $db. Logs at $outLog and $errLog"
}








tune.sql
SET maintenance_work_mem = '512MB';
SET checkpoint_timeout = '1800';
SET max_wal_size = '8192';

%PG_BIN%\psql.exe -h your-rds-endpoint.rds.amazonaws.com -p 5432 -U postgresadmin -d %DBNAME% -f tune.sql



bat file:
@echo off
setlocal enabledelayedexpansion
set PGPASSWORD=your-password

REM Inputs: %1 = dbname
set DBNAME=%1
set DUMP=C:\pg_dumps\%DBNAME%

echo ‚úÖ Restoring schema for %DBNAME%
"C:\Program Files\PostgreSQL\16\bin\pg_restore.exe" -h your-rds-endpoint.rds.amazonaws.com -p 5432 -U your-user -d %DBNAME% --no-owner -Fd "%DUMP%" -s -j 1

echo ‚úÖ Restoring data for %DBNAME%
"C:\Program Files\PostgreSQL\16\bin\pg_restore.exe" -h your-rds-endpoint.rds.amazonaws.com -p 5432 -U your-user -d %DBNAME% --no-owner -Fd "%DUMP%" -a -j 8






$databases = @("db1", "db2", "db3", "db4", "db5", "db6", "db7", "db8", "db9", "db10")

foreach ($db in $databases) {
    cmd.exe /c restore.bat $db
}




